# CREATE VIEW [dbo].[BEC_TASK_INST_RUN_ANALYSIS]
# AS
# SELECT
#   tir.SERVICE_LEVEL,
#   tir.OPC_JOBNAME,
#   tir.SUBJECT_AREA,
#   tir.WORKFLOW_NAME,
#   tir.RUNINST_NAME,
#   tir.VERSION_NUMBER,
#   tir.SUBJECT_ID,
#   tir.WORKFLOW_ID,
#   tir.WORKFLOW_RUN_ID,
#   tir.WORKLET_RUN_ID,
#   tir.CHILD_RUN_ID,
#   tir.INSTANCE_ID,
#   tir.INSTANCE_NAME,
#   tir.TASK_ID,
#   tir.TASK_TYPE_NAME,
#   tir.TASK_TYPE,
#   tir.MAPPING_NAME,
#   tir.RUN_ERR_CODE,
#   tir.RUN_ERR_MSG,
#   tir.RUN_STATUS_CODE,
#   tir.TASK_NAME,
#   tir.TASK_VERSION_NUMBER,
#   tir.SERVER_ID,
#   tir.SERVER_NAME,
#   tir.SERVER_NODE_NAME,
#   tir.LOG_FILE,
#   tir.SRC_SUCCESS_ROWS,
#   tir.TARG_SUCCESS_ROWS,
#   tir.START_TIME,
#   tir.END_TIME,
#   tir.SESSION_MINUTES,
#   CONVERT(decimal(10, 2), DATEDIFF(ss, tir.START_TIME, swil.SRC_START_TIME) / 6e1 ) AS PRE_SESSION_MINUTES,
#   CONVERT(decimal(10, 2), DATEDIFF(ss, swil.TARG_END_TIME, tir.END_TIME) / 6e1 ) AS POST_SESSION_MINUTES,
#   CONVERT(decimal(10, 2), DATEDIFF(ss, swil.WIDGET_START_TIME, isnull(swil.WIDGET_END_TIME, GETDATE())) / 6e1 ) AS WIDGET_SESSION_MINUTES,
#   CONVERT(decimal(10, 2), DATEDIFF(ss, swil.SRC_START_TIME, isnull(swil.SRC_END_TIME, GETDATE())) / 6e1 ) AS SRC_SESSION_MINUTES,
#   CONVERT(decimal(10, 2), DATEDIFF(ss, swil.TARG_START_TIME, isnull(swil.TARG_END_TIME, GETDATE())) / 6e1 ) AS TARG_SESSION_MINUTES,
#   swil.WIDGET_START_TIME,
#   swil.WIDGET_END_TIME,
#   swil.WIDGET_COUNT,
#
#   swil.SRC_START_TIME,
#   swil.SRC_END_TIME,
#   swil.SRC_COUNT,
#   swil.SRC_APPLIED_ROWS,
#   swil.SRC_AFFECTED_ROWS,
#   swil.SRC_REJECTED_ROWS,
#   swil.SRC_MIN_THRUPUT,
#   swil.SRC_MAX_THRUPUT,
#   swil.SRC_AVG_THRUPUT,
#
#   swil.TARG_START_TIME,
#   swil.TARG_END_TIME,
#   swil.TARG_COUNT,
#   swil.TARG_APPLIED_ROWS,
#   swil.TARG_AFFECTED_ROWS,
#   swil.TARG_REJECTED_ROWS,
#   swil.TARG_MIN_THRUPUT,
#   swil.TARG_MAX_THRUPUT,
#   swil.TARG_AVG_THRUPUT
#
# FROM	dbo.BEC_TASK_INST_RUN tir
# 	LEFT OUTER JOIN (
# 		SELECT WORKFLOW_ID, WORKFLOW_RUN_ID, WORKLET_RUN_ID, TASK_INSTANCE_ID,
# 			MIN(START_TIME) AS WIDGET_START_TIME,
# 			MAX(END_TIME) AS WIDGET_END_TIME,
# 			SUM(WIDGET_COUNT) AS WIDGET_COUNT,
# 			SUM(APPLIED_ROWS) AS WIDGET_APPLIED_ROWS,
# 			SUM(AFFECTED_ROWS) AS WIDGET_AFFECTED_ROWS,
# 			SUM(REJECTED_ROWS) AS WIDGET_REJECTED_ROWS,
# 			MAX(MAX_THRUPUT) AS WIDGET_MAX_THRUPUT,
# 			MIN(MIN_THRUPUT) AS WIDGET_MIN_THRUPUT,
# 			SUM(SUM_THRUPUT) / SUM(WIDGET_COUNT) AS WIDGET_AVG_THRUPUT,
#
# 			MIN(CASE WIDGET_GRP WHEN 'SRC' THEN START_TIME END) AS SRC_START_TIME,
# 			MAX(CASE WIDGET_GRP WHEN 'SRC' THEN END_TIME END) AS SRC_END_TIME,
# 			SUM(CASE WIDGET_GRP WHEN 'SRC' THEN WIDGET_COUNT END) AS SRC_COUNT,
# 			SUM(CASE WIDGET_GRP WHEN 'SRC' THEN APPLIED_ROWS END) AS SRC_APPLIED_ROWS,
# 			SUM(CASE WIDGET_GRP WHEN 'SRC' THEN AFFECTED_ROWS END) AS SRC_AFFECTED_ROWS,
# 			SUM(CASE WIDGET_GRP WHEN 'SRC' THEN REJECTED_ROWS END) AS SRC_REJECTED_ROWS,
# 			MAX(CASE WIDGET_GRP WHEN 'SRC' THEN MAX_THRUPUT END) AS SRC_MAX_THRUPUT,
# 			MIN(CASE WIDGET_GRP WHEN 'SRC' THEN MIN_THRUPUT END) AS SRC_MIN_THRUPUT,
# 			SUM(CASE WIDGET_GRP WHEN 'SRC' THEN SUM_THRUPUT END)
# 				/ SUM(CASE WIDGET_GRP WHEN 'SRC' THEN WIDGET_COUNT END) AS SRC_AVG_THRUPUT,
#
# 			MIN(CASE WIDGET_GRP WHEN 'TARG' THEN START_TIME END) AS TARG_START_TIME,
# 			MAX(CASE WIDGET_GRP WHEN 'TARG' THEN END_TIME END) AS TARG_END_TIME,
# 			SUM(CASE WIDGET_GRP WHEN 'TARG' THEN WIDGET_COUNT END) AS TARG_COUNT,
# 			SUM(CASE WIDGET_GRP WHEN 'TARG' THEN APPLIED_ROWS END) AS TARG_APPLIED_ROWS,
# 			SUM(CASE WIDGET_GRP WHEN 'TARG' THEN AFFECTED_ROWS END) AS TARG_AFFECTED_ROWS,
# 			SUM(CASE WIDGET_GRP WHEN 'TARG' THEN REJECTED_ROWS END) AS TARG_REJECTED_ROWS,
# 			MAX(CASE WIDGET_GRP WHEN 'TARG' THEN MAX_THRUPUT END) AS TARG_MAX_THRUPUT,
# 			MIN(CASE WIDGET_GRP WHEN 'TARG' THEN MIN_THRUPUT END) AS TARG_MIN_THRUPUT,
# 			SUM(CASE WIDGET_GRP WHEN 'TARG' THEN SUM_THRUPUT END)
# 				/ SUM(CASE WIDGET_GRP WHEN 'TARG' THEN WIDGET_COUNT END) AS TARG_AVG_THRUPUT
# /* Fjernet alle mid-stream (LKP m.fl.) tal, da de ikke har meningsfyldt indhold (ingen row-count, forkert START_TIME/END_TIME)
# 			MIN(CASE WIDGET_GRP WHEN 'MID' THEN START_TIME END) AS MID_START_TIME,
# 			MAX(CASE WIDGET_GRP WHEN 'MID' THEN END_TIME END) AS MID_END_TIME,
# 			SUM(CASE WIDGET_GRP WHEN 'MID' THEN WIDGET_COUNT END) AS MID_COUNT,
# 			SUM(CASE WIDGET_GRP WHEN 'MID' THEN APPLIED_ROWS END) AS MID_APPLIED_ROWS,
# 			SUM(CASE WIDGET_GRP WHEN 'MID' THEN AFFECTED_ROWS END) AS MID_AFFECTED_ROWS,
# 			SUM(CASE WIDGET_GRP WHEN 'MID' THEN REJECTED_ROWS END) AS MID_REJECTED_ROWS,
# 			MAX(CASE WIDGET_GRP WHEN 'MID' THEN MAX_THRUPUT END) AS MID_MAX_THRUPUT,
# 			MIN(CASE WIDGET_GRP WHEN 'MID' THEN MIN_THRUPUT END) AS MID_MIN_THRUPUT,
# 			SUM(CASE WIDGET_GRP WHEN 'MID' THEN SUM_THRUPUT END)
# 				/ SUM(CASE WIDGET_GRP WHEN 'MID' THEN WIDGET_COUNT END) AS MID_AVG_THRUPUT
# */
# 		FROM (
# 		SELECT WORKFLOW_ID, WORKFLOW_RUN_ID, WORKLET_RUN_ID, TASK_INSTANCE_ID, WIDGET_GRP,
# 			MIN(START_TIME) AS START_TIME,
# 			MAX(END_TIME) AS END_TIME,
# 			COUNT(*) AS WIDGET_COUNT,
# 			SUM(CAST(APPLIED_ROWS AS bigint)) AS APPLIED_ROWS,
# 			SUM(CAST(AFFECTED_ROWS AS bigint)) AS AFFECTED_ROWS,
# 			SUM(CAST(REJECTED_ROWS AS bigint)) AS REJECTED_ROWS,
# 			MAX(THRUPUT) AS MAX_THRUPUT,
# 			MIN(THRUPUT) AS MIN_THRUPUT,
# 			SUM(CAST(THRUPUT AS bigint)) AS SUM_THRUPUT
# 		FROM (SELECT WORKFLOW_ID, WORKFLOW_RUN_ID, WORKLET_RUN_ID, TASK_INSTANCE_ID,
# 					CASE
# 						WHEN WIDGET_TYPE IN (1, 3, 45, 55, 56, 84) THEN 'SRC'
# 						WHEN WIDGET_TYPE IN (2, 37, 38, 39, 53, 54, 76) THEN 'TARG'
# 						ELSE 'MID'
# 					END AS WIDGET_GRP,
# 					START_TIME, END_TIME, APPLIED_ROWS, AFFECTED_ROWS, REJECTED_ROWS, THRUPUT
# 				FROM dbo.OPB_SWIDGINST_LOG) AS x
# 		GROUP BY WORKFLOW_ID, WORKFLOW_RUN_ID, WORKLET_RUN_ID, TASK_INSTANCE_ID, WIDGET_GRP) AS grp
# 		GROUP BY WORKFLOW_ID, WORKFLOW_RUN_ID, WORKLET_RUN_ID, TASK_INSTANCE_ID
# 		) AS swil
# 	 ON tir.WORKFLOW_ID = swil.WORKFLOW_ID
# 	AND tir.WORKFLOW_RUN_ID = swil.WORKFLOW_RUN_ID
# 	AND tir.WORKLET_RUN_ID = swil.WORKLET_RUN_ID
# 	AND tir.INSTANCE_ID = swil.TASK_INSTANCE_ID




# USE [D00000TD10_PWC_REP_FTST2]
# GO
#
# /****** Object:  View [dbo].[BEC_TASK_INST_RUN]    Script Date: 10/11/2020 12:12:47 PM ******/
# SET ANSI_NULLS ON
# GO
#
# SET QUOTED_IDENTIFIER OFF
# GO
#
# CREATE VIEW [dbo].[BEC_TASK_INST_RUN]
# AS
# select
# 		cast(ta.ATTR_VALUE as varchar(100)) [SERVICE_LEVEL],
# 			(
# 				SELECT convert(varchar(100),METADATA_EXTN_VALUE)
# 				FROM  dbo.REP_METADATA_EXTNS AS M
# 				WHERE (METADATA_EXTN_NAME = 'OPC_JOBNAME')
# 				AND (tir.WORKFLOW_ID = METADATA_EXTN_OBJECT_ID)
# 				AND (wfr.VERSION_NUMBER = VERSION_NUMBER)
#             ) AS OPC_JOBNAME,
# 		su.SUBJ_NAME AS SUBJECT_AREA,
# 		wfr.WORKFLOW_NAME,
# 		wfr.RUNINST_NAME,
# 		wfr.VERSION_NUMBER,
# 		tir.SUBJECT_ID,
#         tir.WORKFLOW_ID,
#         tir.WORKFLOW_RUN_ID,
#         tir.WORKLET_RUN_ID,
#         tir.CHILD_RUN_ID,
#         tir.INSTANCE_ID,
#         tir.INSTANCE_NAME,
#         tir.TASK_ID,
#         ot.OBJECT_TYPE_NAME AS TASK_TYPE_NAME,
#         tir.TASK_TYPE,
#         stl.MAPPING_NAME MAPPING_NAME,
#         tir.RUN_ERR_CODE, convert(varchar(2000),
#         tir.RUN_ERR_MSG) RUN_ERR_MSG,
#         tir.RUN_STATUS_CODE,
#         tir.TASK_NAME,
#         tir.VERSION_NUMBER AS TASK_VERSION_NUMBER,
#         tir.SERVER_ID,
#         tir.SERVER_NAME,
#         tir.SERVER_NODE_NAME,
#         case
# 			when stl.LOG_FILE like '_:\infa_shared\%' then '\\pwcFTST2share.res.bec.dk' + SUBSTRING(stl.LOG_FILE, 3, 2000)
# 			else convert(varchar(2000), stl.LOG_FILE)
# 		end + '.bin' LOG_FILE,
#         CONVERT(BIGINT,stl.SRC_SUCCESS_ROWS) SRC_SUCCESS_ROWS,
#         CONVERT(BIGINT,stl.TARG_SUCCESS_ROWS) TARG_SUCCESS_ROWS,
#         tir.START_TIME,
#         tir.END_TIME,
#         CONVERT(decimal(10, 2),
#                 DATEDIFF(ss,
#                          tir.START_TIME,
#                          isnull(tir.END_TIME, GETDATE())) / 6e1
#                ) AS SESSION_MINUTES,
#         case when tir.task_type=68 --and tir.run_status_code = 1
# 		     then CONVERT(decimal(10, 2),
# 		                  DATEDIFF(ss,
# 		                           tir.START_TIME,
# 		                           isnull(swil.SRCSTART,GETDATE())) / 6e1 )
# 		     end as IDLE_MINUTES,
#         case when tir.task_type=68 --and tir.run_status_code = 1
# 		     then CONVERT(decimal(10, 2),
# 		                  DATEDIFF(ss,
# 		                           swil.TGTEND,
# 		                           isnull(tir.END_TIME,GETDATE())) / 6e1 )
# 		     end as POST_MINUTES,
# 		CONVERT(decimal(10, 2),DATEDIFF(ss, swil.SRCSTART, isnull(swil.TGTEND, GETDATE())) / 6e1) as SRCTGT_MINUTES,
#         swil.SRCSTART,
#         swil.TGTEND,
#         swil.SRCTGT_COUNT
# FROM               dbo.OPB_TASK_INST_RUN AS tir
# 		INNER JOIN dbo.OPB_SUBJECT AS su
# 		            ON tir.SUBJECT_ID = su.SUBJ_ID
# 		INNER JOIN dbo.OPB_WFLOW_RUN AS wfr
# 		            ON tir.WORKFLOW_ID = wfr.WORKFLOW_ID
# 		           AND tir.WORKFLOW_RUN_ID = wfr.WORKFLOW_RUN_ID
#         INNER JOIN dbo.OPB_TASK_ATTR AS ta
#                     ON ta.TASK_ID = wfr.WORKFLOW_ID
#                    AND ta.VERSION_NUMBER = wfr.VERSION_NUMBER
#                    AND ta.ATTR_ID = 16
#                    AND ta.TASK_TYPE = 71
#         INNER JOIN dbo.OPB_OBJECT_TYPE AS ot
#                     ON tir.TASK_TYPE = ot.OBJECT_TYPE_ID
#         LEFT JOIN  dbo.OPB_SESS_TASK_LOG AS stl
# 		            ON tir.WORKFLOW_ID = stl.WORKFLOW_ID
#                    AND tir.WORKFLOW_RUN_ID = stl.WORKFLOW_RUN_ID
#                    AND tir.INSTANCE_ID = stl.INSTANCE_ID
#         LEFT JOIN  (select WORKFLOW_ID,WORKFLOW_RUN_ID,WORKLET_RUN_ID,TASK_INSTANCE_ID,
#                           min(x.START_TIME) AS SRCSTART,
#                           max(x.END_TIME) AS TGTEND,
#                           count (*) as SRCTGT_COUNT
# 		            from dbo.OPB_SWIDGINST_LOG x
# 		            group by WORKFLOW_ID,WORKFLOW_RUN_ID,WORKLET_RUN_ID,TASK_INSTANCE_ID
# 		           ) as swil
#                     ON tir.WORKFLOW_ID     = swil.WORKFLOW_ID
#                    AND tir.WORKFLOW_RUN_ID = swil.WORKFLOW_RUN_ID
#                    AND tir.WORKLET_RUN_ID  = swil.WORKLET_RUN_ID
#                    AND tir.INSTANCE_ID     = swil.TASK_INSTANCE_ID
# GO
#
#
